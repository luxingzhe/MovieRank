{"version":3,"sources":["Components/Movie.jsx","Pages/MovieList.jsx","Pages/MovieStat.jsx","App.js","serviceWorker.js","index.js"],"names":["Movie","clickHandler","movieDetails","onClick","className","src","poster_path","alt","MovieDetails","props","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","movie","title","Body","overview","Footer","Button","onHide","MovieList","useState","movieList","setMovieList","modalShow","setModalShow","clickedMovie","setClickedMovie","useEffect","fetch","then","result","json","data","results","map","index","key","method","headers","body","JSON","stringify","onclickHandler","show","MovieStat","clickStat","setClickStat","Object","keys","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4XAIaA,EAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAhB,OACjB,yBAAKC,QAASF,EAAcG,UAAU,eAClC,yBAAKC,IAAG,yCAAqCH,EAAaI,aAAeC,IAAI,aAIxEC,EAAe,SAACC,GAAD,OACxB,6BACI,kBAACC,EAAA,EAAD,iBACID,EADJ,CACWE,KAAK,KAChBC,kBAAgB,gCAChBC,UAAQ,IACJ,kBAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,GACrB,kBAACL,EAAA,EAAMM,MAAP,CAAaC,GAAG,iCACfR,EAAMS,MAAMC,QAGjB,kBAACT,EAAA,EAAMU,KAAP,KACI,wCACA,2BACCX,EAAMS,MAAMG,WAGjB,kBAACX,EAAA,EAAMY,OAAP,KACI,kBAACC,EAAA,EAAD,CAAQpB,QAASM,EAAMe,QAAvB,aCWDC,G,MAnCG,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACbC,EADa,KACFC,EADE,OAEcF,oBAAS,GAFvB,mBAEbG,EAFa,KAEFC,EAFE,OAGoBJ,mBAAS,IAH7B,mBAGbK,EAHa,KAGCC,EAHD,KAIpBC,qBAAU,WACNC,MAAM,uFACLC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GACFV,EAAaU,EAAKC,cAEvB,IAaH,OACI,6BACI,yBAAKnC,UAAU,oBAAf,kBACA,yBAAKA,UAAU,cACVuB,EAAUa,KACX,SAACJ,EAAQK,GAAT,OAAmB,kBAAC,EAAD,CAAOC,IAAKD,EAAOxC,aAAc,kBAjBzC,SAACmC,GACpBJ,EAAgBI,GAChBN,GAAa,GACbI,MAAM,wBAAyB,CAC3BS,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUX,KAQuCY,CAAeZ,IAASlC,aAAckC,QAElG,kBAAC,EAAD,CAAca,KAAMpB,EAAWL,OAAQ,kBAAMM,GAAa,IAAQZ,MAAOa,OCAtEmB,G,MA/BG,WAAO,IAAD,EACcxB,mBAAS,IADvB,mBACbyB,EADa,KACFC,EADE,KASpB,OAPAnB,qBAAU,WACNC,MAAM,yBACLC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GACFc,EAAad,QAElB,IAEC,6BACI,yBAAKlC,UAAU,oBAAf,yBACA,2BAAOA,UAAU,oBACb,+BACI,wBAAIA,UAAU,mBACV,0CACA,kDAGR,+BAECiD,OAAOC,KAAKH,GAAWX,KACxB,SAACJ,EAAQK,GAAT,OAAoB,wBAAIC,IAAKD,EAAOrC,UAAU,kBAC1C,4BAAKgC,GACL,4BAAKe,EAAUf,a,MCApBmB,MArBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKnD,UAAU,OACb,yBAAKA,UAAU,WAEX,kBAAC,IAAD,CAAMoD,GAAG,KAAT,QAGA,kBAAC,IAAD,CAAMA,GAAG,SAAT,qBAGJ,yBAAKpD,UAAU,sBACb,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAO,IAAIC,UAAWlC,KAEnC,kBAAC,IAAD,CAAOiC,KAAK,QAAQC,UAAWT,OCTrBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.b9335a03.chunk.js","sourcesContent":["import React from 'react';\nimport '../style/Movie.css';\nimport {Modal, Button} from 'react-bootstrap';\n\nexport const Movie = ({clickHandler, movieDetails}) => (\n    <div onClick={clickHandler} className=\"movie-image\">\n        <img src= {`http://image.tmdb.org/t/p/w185/${movieDetails.poster_path}`} alt=\"poster\" />\n    </div>\n)\n\nexport const MovieDetails = (props) => (\n    <div>\n        <Modal\n        {...props} size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                {props.movie.title}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <h4>Overview</h4>\n                <p>\n                {props.movie.overview}\n                </p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    </div>\n)\n","import React, {useState, useEffect} from 'react';\nimport {Movie, MovieDetails} from '../Components/Movie';\nimport '../style/MovieList.css';\n\nconst MovieList = () => {\n    const [movieList, setMovieList] = useState([]);\n    const [modalShow, setModalShow] = useState(false);\n    const [clickedMovie, setClickedMovie] = useState({});\n    useEffect(()=>{\n        fetch('https://api.themoviedb.org/3/movie/popular?api_key=702240cc94c55db109a27bd53c65e1ae')\n        .then(result => result.json())\n        .then(data => {\n            setMovieList(data.results);\n        })\n    }, []);\n    const onclickHandler = (result) => {\n        setClickedMovie(result);\n        setModalShow(true);\n        fetch('http://localhost:3100', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(result)\n            })\n    };\n    return (\n        <div>\n            <div className=\"movie-list-title\">What's popular</div>\n            <div className=\"movie-list\">\n                {movieList.map(\n                (result, index) => <Movie key={index} clickHandler={()=>onclickHandler(result)} movieDetails={result} />)}\n            </div>\n            <MovieDetails show={modalShow} onHide={() => setModalShow(false)} movie={clickedMovie}/>\n         </div>\n    )\n}\n\nexport default MovieList;","import React, {useState, useEffect} from 'react';\nimport '../style/MovieStat.css';\n\nconst MovieStat = () => {\n    const [clickStat, setClickStat] = useState({});\n    useEffect(()=>{\n        fetch('http://localhost:3100')\n        .then(result => result.json())\n        .then(data => {\n            setClickStat(data);\n        })\n    }, []);\n    return (\n        <div>\n            <div className=\"movie-stat-title\">Your Click Statistics</div>\n            <table className=\"movie-stat-table\">\n                <thead>\n                    <tr className=\"movie-stat-head\">\n                        <th>Movie Name</th>\n                        <th>Number of Clicks</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {/* {clickStat && true ? <tr className=\"movie-stat-row\"><td>No Data to Display</td></tr> : */}\n                {Object.keys(clickStat).map(\n                (result, index) => (<tr key={index} className=\"movie-stat-row\">\n                    <td>{result}</td>\n                    <td>{clickStat[result]}</td>\n                </tr>))}\n                </tbody>\n            </table>\n        </div>\n    )}\n\nexport default MovieStat;","import React from 'react';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport MovieList from './Pages/MovieList';\nimport MovieStat from './Pages/MovieStat';\nimport './style/App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"App-nav\">\n          {/* <li> */}\n            <Link to=\"/\">Home</Link>\n          {/* </li> */}\n          {/* <li> */}\n            <Link to=\"/stat\">Click Statistics</Link>\n          {/* </li> */}\n        </div>\n        <div className=\"app-list-container\">\n          <Route exact path = '/' component={MovieList} />\n        </div>\n          <Route path='/stat' component={MovieStat} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}